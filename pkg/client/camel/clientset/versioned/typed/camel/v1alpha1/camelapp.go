/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	camelv1alpha1 "github.com/camel-tooling/camel-dashboard-operator/pkg/apis/camel/v1alpha1"
	applyconfigurationcamelv1alpha1 "github.com/camel-tooling/camel-dashboard-operator/pkg/client/camel/applyconfiguration/camel/v1alpha1"
	scheme "github.com/camel-tooling/camel-dashboard-operator/pkg/client/camel/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// CamelAppsGetter has a method to return a CamelAppInterface.
// A group's client should implement this interface.
type CamelAppsGetter interface {
	CamelApps(namespace string) CamelAppInterface
}

// CamelAppInterface has methods to work with CamelApp resources.
type CamelAppInterface interface {
	Create(ctx context.Context, camelApp *camelv1alpha1.CamelApp, opts v1.CreateOptions) (*camelv1alpha1.CamelApp, error)
	Update(ctx context.Context, camelApp *camelv1alpha1.CamelApp, opts v1.UpdateOptions) (*camelv1alpha1.CamelApp, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, camelApp *camelv1alpha1.CamelApp, opts v1.UpdateOptions) (*camelv1alpha1.CamelApp, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*camelv1alpha1.CamelApp, error)
	List(ctx context.Context, opts v1.ListOptions) (*camelv1alpha1.CamelAppList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *camelv1alpha1.CamelApp, err error)
	Apply(ctx context.Context, camelApp *applyconfigurationcamelv1alpha1.CamelAppApplyConfiguration, opts v1.ApplyOptions) (result *camelv1alpha1.CamelApp, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, camelApp *applyconfigurationcamelv1alpha1.CamelAppApplyConfiguration, opts v1.ApplyOptions) (result *camelv1alpha1.CamelApp, err error)
	CamelAppExpansion
}

// camelApps implements CamelAppInterface
type camelApps struct {
	*gentype.ClientWithListAndApply[*camelv1alpha1.CamelApp, *camelv1alpha1.CamelAppList, *applyconfigurationcamelv1alpha1.CamelAppApplyConfiguration]
}

// newCamelApps returns a CamelApps
func newCamelApps(c *CamelV1alpha1Client, namespace string) *camelApps {
	return &camelApps{
		gentype.NewClientWithListAndApply[*camelv1alpha1.CamelApp, *camelv1alpha1.CamelAppList, *applyconfigurationcamelv1alpha1.CamelAppApplyConfiguration](
			"camelapps",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *camelv1alpha1.CamelApp { return &camelv1alpha1.CamelApp{} },
			func() *camelv1alpha1.CamelAppList { return &camelv1alpha1.CamelAppList{} },
		),
	}
}
