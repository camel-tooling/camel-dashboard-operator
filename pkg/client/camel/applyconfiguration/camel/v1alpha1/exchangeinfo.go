/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExchangeInfoApplyConfiguration represents a declarative configuration of the ExchangeInfo type for use
// with apply.
type ExchangeInfoApplyConfiguration struct {
	Total         *int     `json:"total,omitempty"`
	Succeeded     *int     `json:"succeed,omitempty"`
	Failed        *int     `json:"failed,omitempty"`
	Pending       *int     `json:"pending,omitempty"`
	LastTimestamp *v1.Time `json:"lastTimestamp,omitempty"`
}

// ExchangeInfoApplyConfiguration constructs a declarative configuration of the ExchangeInfo type for use with
// apply.
func ExchangeInfo() *ExchangeInfoApplyConfiguration {
	return &ExchangeInfoApplyConfiguration{}
}

// WithTotal sets the Total field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Total field is set to the value of the last call.
func (b *ExchangeInfoApplyConfiguration) WithTotal(value int) *ExchangeInfoApplyConfiguration {
	b.Total = &value
	return b
}

// WithSucceeded sets the Succeeded field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Succeeded field is set to the value of the last call.
func (b *ExchangeInfoApplyConfiguration) WithSucceeded(value int) *ExchangeInfoApplyConfiguration {
	b.Succeeded = &value
	return b
}

// WithFailed sets the Failed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Failed field is set to the value of the last call.
func (b *ExchangeInfoApplyConfiguration) WithFailed(value int) *ExchangeInfoApplyConfiguration {
	b.Failed = &value
	return b
}

// WithPending sets the Pending field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pending field is set to the value of the last call.
func (b *ExchangeInfoApplyConfiguration) WithPending(value int) *ExchangeInfoApplyConfiguration {
	b.Pending = &value
	return b
}

// WithLastTimestamp sets the LastTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTimestamp field is set to the value of the last call.
func (b *ExchangeInfoApplyConfiguration) WithLastTimestamp(value v1.Time) *ExchangeInfoApplyConfiguration {
	b.LastTimestamp = &value
	return b
}
